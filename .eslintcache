[{"G:\\GitHub\\MockFrontend\\src\\App.js":"1","G:\\GitHub\\MockFrontend\\src\\store\\reducers\\alert.js":"2","G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\UserProfile.js":"3","G:\\GitHub\\MockFrontend\\src\\containers\\Volunteers\\Volunteers.js":"4","G:\\GitHub\\MockFrontend\\src\\store\\actions\\actionTypes.js":"5","G:\\GitHub\\MockFrontend\\src\\shared\\consts.js":"6","G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\panels.js":"7","G:\\GitHub\\MockFrontend\\src\\shared\\validate.js":"8","G:\\GitHub\\MockFrontend\\src\\helpers\\uiHelpers.js":"9","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Grid\\GridItem.js":"10","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardAvatar.js":"11","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardBody.js":"12","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardFooter.js":"13","G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\companies.js":"14","G:\\GitHub\\MockFrontend\\src\\store\\actions\\alert.js":"15","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardFooterStyle.js":"16","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardStyle.js":"17","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardAvatarStyle.js":"18","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\buttonStyle.js":"19","G:\\GitHub\\MockFrontend\\src\\api\\PanelAPI.js":"20","G:\\GitHub\\MockFrontend\\src\\api\\VolunteerAPI.js":"21","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react.js":"22","G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\companies.js":"23","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Grid\\GridContainer.js":"24","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\Card.js":"25","G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHAlert\\FHAlert.js":"26","G:\\GitHub\\MockFrontend\\src\\api\\CompaniesAPI.js":"27","G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHSnackBar\\FHSnackBar.js":"28","G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\panels.js":"29","G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\panel.js":"30","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Navbar\\Navbar.js":"31","G:\\GitHub\\MockFrontend\\src\\shared\\routes.js":"32","G:\\GitHub\\MockFrontend\\src\\api\\VolunteerInterviewsAPI.js":"33","G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\Interviewee.js":"34","G:\\GitHub\\MockFrontend\\src\\index.js":"35","G:\\GitHub\\MockFrontend\\src\\store\\reducers\\auth.js":"36","G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\Uploadfile.js":"37","G:\\GitHub\\MockFrontend\\src\\containers\\Auth\\auth.js":"38","G:\\GitHub\\MockFrontend\\src\\shared\\utility.js":"39","G:\\GitHub\\MockFrontend\\src\\api\\InterviewsAPI.js":"40","G:\\GitHub\\MockFrontend\\src\\components\\UI\\CustomButtons\\Button.js":"41","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardHeader.js":"42","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Table\\MaterialTable\\Table.js":"43","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardHeaderStyle.js":"44","G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\ContactVolunteer.js":"45","G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\volunteers.js":"46","G:\\GitHub\\MockFrontend\\src\\store\\actions\\index.js":"47","G:\\GitHub\\MockFrontend\\src\\api\\utils.js":"48","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\customInputStyle.js":"49","G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\volunteers.js":"50","G:\\GitHub\\MockFrontend\\src\\components\\UI\\CustomInput\\CustomInput.js":"51","G:\\GitHub\\MockFrontend\\src\\helpers\\tableIcons.js":"52","G:\\GitHub\\MockFrontend\\src\\api\\IntervieweeAPI.js":"53","G:\\GitHub\\MockFrontend\\src\\services\\socket.js":"54","G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHModal\\FHModal.js":"55","G:\\GitHub\\MockFrontend\\src\\store\\actions\\auth.js":"56","G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHtexthelp.js":"57","G:\\GitHub\\MockFrontend\\src\\axios-SE.js":"58","G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\interviewee.js":"59","G:\\GitHub\\MockFrontend\\src\\serviceWorker.js":"60","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Navbar\\NavbarVolun.js":"61","G:\\GitHub\\MockFrontend\\src\\containers\\Volunteers\\IntervieweeList.js":"62","G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardBodyStyle.js":"63"},{"size":2004,"mtime":1614410330265,"results":"64","hashOfConfig":"65"},{"size":1011,"mtime":1611470462574,"results":"66","hashOfConfig":"65"},{"size":3407,"mtime":1614419142889,"results":"67","hashOfConfig":"65"},{"size":5856,"mtime":1614428333656,"results":"68","hashOfConfig":"65"},{"size":252,"mtime":1609730397621,"results":"69","hashOfConfig":"65"},{"size":304,"mtime":1612272104705,"results":"70","hashOfConfig":"65"},{"size":7854,"mtime":1613729239135,"results":"71","hashOfConfig":"65"},{"size":987,"mtime":1611470441387,"results":"72","hashOfConfig":"65"},{"size":1207,"mtime":1612259581915,"results":"73","hashOfConfig":"65"},{"size":644,"mtime":1612588330147,"results":"74","hashOfConfig":"65"},{"size":1084,"mtime":1612613549364,"results":"75","hashOfConfig":"65"},{"size":1057,"mtime":1612613628666,"results":"76","hashOfConfig":"65"},{"size":1217,"mtime":1612613649898,"results":"77","hashOfConfig":"65"},{"size":4744,"mtime":1614428739908,"results":"78","hashOfConfig":"65"},{"size":309,"mtime":1609730397622,"results":"79","hashOfConfig":"65"},{"size":1102,"mtime":1612613670521,"results":"80","hashOfConfig":"65"},{"size":851,"mtime":1612613822089,"results":"81","hashOfConfig":"65"},{"size":764,"mtime":1612613614667,"results":"82","hashOfConfig":"65"},{"size":8673,"mtime":1612613524003,"results":"83","hashOfConfig":"65"},{"size":537,"mtime":1613969745462,"results":"84","hashOfConfig":"65"},{"size":562,"mtime":1614364567522,"results":"85","hashOfConfig":"65"},{"size":7303,"mtime":1612642913219,"results":"86","hashOfConfig":"65"},{"size":7562,"mtime":1614412900669,"results":"87","hashOfConfig":"65"},{"size":680,"mtime":1612588330147,"results":"88","hashOfConfig":"65"},{"size":1091,"mtime":1612613791875,"results":"89","hashOfConfig":"65"},{"size":1514,"mtime":1612546984189,"results":"90","hashOfConfig":"65"},{"size":569,"mtime":1614426367814,"results":"91","hashOfConfig":"65"},{"size":1249,"mtime":1609730397601,"results":"92","hashOfConfig":"65"},{"size":5566,"mtime":1613893077032,"results":"93","hashOfConfig":"65"},{"size":6734,"mtime":1614513252428,"results":"94","hashOfConfig":"65"},{"size":2877,"mtime":1614428625906,"results":"95","hashOfConfig":"65"},{"size":495,"mtime":1614410058788,"results":"96","hashOfConfig":"65"},{"size":621,"mtime":1613967956924,"results":"97","hashOfConfig":"65"},{"size":7301,"mtime":1614424630172,"results":"98","hashOfConfig":"65"},{"size":1230,"mtime":1611570005183,"results":"99","hashOfConfig":"65"},{"size":1658,"mtime":1612765788119,"results":"100","hashOfConfig":"65"},{"size":193,"mtime":1613729187104,"results":"101","hashOfConfig":"65"},{"size":6601,"mtime":1614371257097,"results":"102","hashOfConfig":"65"},{"size":3612,"mtime":1613967956948,"results":"103","hashOfConfig":"65"},{"size":678,"mtime":1614365362943,"results":"104","hashOfConfig":"65"},{"size":1749,"mtime":1612613348245,"results":"105","hashOfConfig":"65"},{"size":1308,"mtime":1612613744187,"results":"106","hashOfConfig":"65"},{"size":512,"mtime":1610179596324,"results":"107","hashOfConfig":"65"},{"size":3096,"mtime":1612613772270,"results":"108","hashOfConfig":"65"},{"size":3472,"mtime":1614428309700,"results":"109","hashOfConfig":"65"},{"size":7562,"mtime":1612611091564,"results":"110","hashOfConfig":"65"},{"size":136,"mtime":1611470457353,"results":"111","hashOfConfig":"65"},{"size":1279,"mtime":1611433686823,"results":"112","hashOfConfig":"65"},{"size":1413,"mtime":1612613862793,"results":"113","hashOfConfig":"65"},{"size":5161,"mtime":1613829889959,"results":"114","hashOfConfig":"65"},{"size":2323,"mtime":1612613842875,"results":"115","hashOfConfig":"65"},{"size":2256,"mtime":1609785919269,"results":"116","hashOfConfig":"65"},{"size":427,"mtime":1612688912978,"results":"117","hashOfConfig":"65"},{"size":550,"mtime":1613829889959,"results":"118","hashOfConfig":"65"},{"size":921,"mtime":1614368845336,"results":"119","hashOfConfig":"65"},{"size":3386,"mtime":1613967956949,"results":"120","hashOfConfig":"65"},{"size":567,"mtime":1612532709235,"results":"121","hashOfConfig":"65"},{"size":160,"mtime":1610477837633,"results":"122","hashOfConfig":"65"},{"size":7567,"mtime":1614412913766,"results":"123","hashOfConfig":"65"},{"size":5485,"mtime":1610353715018,"results":"124","hashOfConfig":"65"},{"size":3019,"mtime":1614427284101,"results":"125","hashOfConfig":"65"},{"size":7301,"mtime":1614513036887,"results":"126","hashOfConfig":"65"},{"size":315,"mtime":1612588330120,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1q6uzr4",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"139"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"139"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"153"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"139"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"130"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"156"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"156"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"130"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"130"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"130"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"G:\\GitHub\\MockFrontend\\src\\App.js",[],["271","272"],"G:\\GitHub\\MockFrontend\\src\\store\\reducers\\alert.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\UserProfile.js",["273","274","275","276","277","278","279","280","281"],"G:\\GitHub\\MockFrontend\\src\\containers\\Volunteers\\Volunteers.js",["282"],"G:\\GitHub\\MockFrontend\\src\\store\\actions\\actionTypes.js",[],["283","284"],"G:\\GitHub\\MockFrontend\\src\\shared\\consts.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\panels.js",["285"],"import React, { useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport clsx from \"clsx\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ArrowDropDownCircleIcon from \"@material-ui/icons/ArrowDropDownCircle\";\r\n\r\n\r\n\r\nimport * as routez from \"../../../shared/routes\";\r\nimport { authLogout, removeAlert } from \"../../../store/actions/index\";\r\nimport Alert from \"../../../components/UI/FHAlert/FHAlert\";\r\n\r\nimport Panels from \"../../../containers/Admin/panels\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    backgroundColor: grey[800],\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    backgroundColor: grey[800],\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papernav: {\r\n    height: \"100%\",\r\n    backgroundColor: grey[300],\r\n  },\r\n  menuButtonlog: {\r\n    color: \"white\",\r\n  },\r\n  // fixedHeight: {\r\n  //   height: '100%',\r\n  // },\r\n \r\n}));\r\n\r\nfunction Dashboard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const { onauthLogout, isAuthenticated } = props;\r\n\r\n  const handleLogout = () => {\r\n    onauthLogout();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const removeAlert = props.removeAlert;\r\n  const handleAlertClose = useCallback(\r\n    (alertId) => {\r\n      removeAlert(alertId);\r\n    },\r\n    [removeAlert]\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(\r\n              classes.menuButton,\r\n              open && classes.menuButtonHidden\r\n            )}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            IEEE\r\n          </Typography>\r\n          <Button\r\n            className={classes.menuButtonlog}\r\n            onClick={() => handleLogout()}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List className={classes.papernav}>\r\n          <ListItem button onClick={() => history.push(`${routez.COMPANIES}`)}>\r\n            <ListItemIcon>\r\n              <ArrowDropDownCircleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Companies\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.PANELS}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Panels\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.VOLUNTEERS}`)}>\r\n            <ListItemIcon>\r\n              <AccountBalanceIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Volunteers\" />\r\n          </ListItem>\r\n          <ListItem\r\n            button\r\n            onClick={() => history.push(`${routez.INTERVIEWEEBASIC}`)}\r\n          >\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Interviewee\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={12} lg={12}>\r\n              <Alert\r\n                handleAlertClose={handleAlertClose}\r\n                alerts={props.alerts}\r\n              />\r\n              <Panels />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n \r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token != null,\r\n    alerts: state.alert.alerts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onauthLogout: () => dispatch(authLogout()),\r\n    removeAlert: (alertId) => dispatch(removeAlert(alertId)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","G:\\GitHub\\MockFrontend\\src\\shared\\validate.js",[],"G:\\GitHub\\MockFrontend\\src\\helpers\\uiHelpers.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Grid\\GridItem.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardAvatar.js",[],["286","287"],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardBody.js",[],["288","289"],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardFooter.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\companies.js",["290","291"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { getAllCompanies, deleteCompanies, updateCompanies, saveCompamies } from '../../api/CompaniesAPI';\r\nimport { replaceItemInArray, removeItemFromArray, addItemToArray } from '../../shared/utility';\r\nimport Table from '../../components/UI/Table/MaterialTable/Table';\r\nimport * as actions from '../../store/actions/index';\r\nimport { Button } from '@material-ui/core';\r\nimport {getSocket} from '../../services/socket';\r\n\r\nconst CompanyTable = 'Company Table';\r\n\r\nconst tableOptions = {\r\n\tpageSize: 10,\r\n\tpageSizeOptions: [10, 30, 50],\r\n};\r\n\r\nconst Companies = (props) => {\r\n\tlet history = useHistory();\r\n\r\n\tconst [companies, setComanies] = useState([]);\r\n\tuseEffect(() => {\r\n\t\tgetAllCompanies().then((response) => {\r\n\t\t\tif (!response.error) {\r\n\t\t\t\t// (response.data).forEach(user => setUsers(user));\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tsetComanies(response.data);\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\tuseEffect(() => {\r\n\t\tlet socket = getSocket();\r\n\t\tsocket.on('company', (method, data) => {\r\n\t\t\tconsole.log(\"Event triggered\");\r\n\t\t\tconsole.log(method);\r\n\t\t\tconsole.log(data);\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'post':\r\n\t\t\t\t\tsetComanies(addItemToArray(companies, data));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tsetComanies(replaceItemInArray(companies, 'companyID', data, data.companyID));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tconsole.log(\"In\");\r\n\t\t\t\t\tconsole.log(data.id);\r\n\t\t\t\t\tsetComanies(removeItemFromArray(companies, 'companyID', parseInt(data.id)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('Invalid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}, [companies]);\r\n\tuseEffect(() => {\r\n\t\tlet socket = getSocket();\r\n\t\tsocket.on('user', (method) => {\r\n\t\t\tconsole.log(\"Event triggered\");\r\n\t\t\tconsole.log(method);\r\n\t\t});\r\n\t}, []);\r\n\tconst { addAlert } = props;\r\n\t// const [isLoading, setIsLoading] = useState(true);\r\n\r\n\tconst deleteCompany = useCallback(\r\n\t\t(oldcompanies) => {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tdeleteCompanies(oldcompanies.companyID).then((response) => {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\tif (!response.error) {\r\n\t\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\t\tmessage: 'Company deletion Successful!',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetComanies(removeItemFromArray(companies, 'companyID', oldcompanies.companyID, oldcompanies));\r\n\t\t\t\t\t\treturn resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\tmessage: 'Failed!',\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn reject();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\t[addAlert, companies]\r\n\t);\r\n\r\n\tconst updateCompany = useCallback(\r\n\t\t(newCompanies, oldCompanies) => {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tupdateCompanies(oldCompanies.companyID, newCompanies).then((response) => {\r\n\t\t\t\t\tif (!response.error) {\r\n\t\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\t\tmessage: 'Company Updated Successfully!',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetComanies(replaceItemInArray(companies, 'companyID', newCompanies, oldCompanies.companyID));\r\n\t\t\t\t\t\treturn resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\tmessage: 'Failed!',\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn reject();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\t[addAlert, companies]\r\n\t);\r\n\r\n\tconst saveCompany = useCallback(\r\n\t\t(newCompanies) => {\r\n\t\t\tvar data = {\r\n\t\t\t\tcompanyID: newCompanies.companyID,\r\n\t\t\t\tcompanyName: newCompanies.companyName,\r\n\t\t\t\temail: newCompanies.email,\r\n\t\t\t\tcontactNo: newCompanies.contactNo,\r\n\t\t\t};\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tsaveCompamies(data).then((response) => {\r\n\t\t\t\t\tif (!response.error) {\r\n\t\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\t\tmessage: 'Company Saved Successfully!',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetComanies(addItemToArray(companies, response.data));\r\n\t\t\t\t\t\treturn resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t\taddAlert({\r\n\t\t\t\t\t\tmessage: 'Failed!',\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn reject();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\t[addAlert, companies]\r\n\t);\r\n\r\n\tconst renderProfileBtn = useCallback(\r\n\t\t(rowData) => (\r\n\t\t\t<Button color=\"primary\" onClick={() => history.push(`users/${rowData.officerID}`)}>\r\n\t\t\t\tProfile\r\n\t\t\t</Button>\r\n\t\t),\r\n\t\t[history]\r\n\t);\r\n\r\n\tconst tableColumns = [\r\n\t\t{ title: 'Company Id', field: 'companyID', editable: 'never' },\r\n\t\t{ title: 'Name', field: 'companyName' },\r\n\t\t{ title: 'Email', field: 'email' },\r\n\t\t{ title: 'Contact Number', field: 'contactNo' },\r\n\t];\r\n\r\n\tif (false) {\r\n\t\t//return <Spinner />\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Table\r\n\t\t\t\tdata={companies}\r\n\t\t\t\ttitle={CompanyTable}\r\n\t\t\t\tcolumns={tableColumns}\r\n\t\t\t\ttableOptions={tableOptions}\r\n\t\t\t\teditable={{\r\n\t\t\t\t\tonRowAdd: (newData) => saveCompany(newData),\r\n\t\t\t\t\tonRowUpdate: (newData, oldData) => updateCompany(newData, oldData),\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddAlert: (alert) => dispatch(actions.addAlert(alert)),\r\n\t};\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Companies);\r\n","G:\\GitHub\\MockFrontend\\src\\store\\actions\\alert.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardFooterStyle.js",[],["292","293"],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardStyle.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardAvatarStyle.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\buttonStyle.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\PanelAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\VolunteerAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\companies.js",["294"],"import React,{useCallback} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport clsx from 'clsx';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Button from '@material-ui/core/Button';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ArrowDropDownCircleIcon from '@material-ui/icons/ArrowDropDownCircle';\r\n\r\nimport * as routez from '../../../shared/routes';\r\nimport { authLogout, removeAlert } from \"../../../store/actions/index\";\r\nimport Alert from '../../../components/UI/FHAlert/FHAlert';\r\n\r\nimport Companies from '../../../containers/Admin/companies';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    backgroundColor: grey[800],\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    backgroundColor: grey[800],\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  papernav: {\r\n    height: '100%',\r\n    backgroundColor: grey[300],\r\n  },\r\n  menuButtonlog: {\r\n    color: \"white\"\r\n  }\r\n  // fixedHeight: {\r\n  //   height: '100%',\r\n  // },\r\n}));\r\n\r\nfunction Dashboard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const { onauthLogout, isAuthenticated } = props;\r\n\r\n    const handleLogout = () => {\r\n\t\tonauthLogout();\r\n\t\thistory.push(\"/\");\r\n   };\r\n   \r\n  const removeAlert = props.removeAlert;\r\n  const handleAlertClose = useCallback((alertId) => {\r\n      removeAlert(alertId);\r\n  }, [removeAlert]);\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            IEEE \r\n          </Typography>\r\n          <Button className={classes.menuButtonlog} onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List  className={classes.papernav}>\r\n          <ListItem button onClick={() => history.push(`${routez.COMPANIES}`)}>\r\n            <ListItemIcon>\r\n              <ArrowDropDownCircleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Companies\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.PANELS}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Panels\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.VOLUNTEERS}`)}>\r\n            <ListItemIcon>\r\n              <AccountBalanceIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Volunteers\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.INTERVIEWEEBASIC}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Interviewee\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <Alert handleAlertClose={handleAlertClose} alerts={props.alerts} />\r\n                <Companies />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n    isAuthenticated: state.auth.token != null,\r\n    alerts: state.alert.alerts\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onauthLogout: () => dispatch(authLogout()),\r\n    removeAlert: (alertId) => dispatch(removeAlert(alertId))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Grid\\GridContainer.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\Card.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHAlert\\FHAlert.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\CompaniesAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHSnackBar\\FHSnackBar.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\panels.js",["295"],"import React , {useState, useEffect, useCallback } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {getAllPanels, deletePanels, updatePanels, savePanels } from \"../../api/PanelAPI\"\r\nimport {replaceItemInArray, removeItemFromArray, addItemToArray} from \"../../shared/utility\";\r\nimport Table from \"../../components/UI/Table/MaterialTable/Table\";\r\nimport * as actions from '../../store/actions/index';\r\nimport { Button } from \"@material-ui/core\";\r\nimport {getSocket} from '../../services/socket';\r\n\r\nconst CompanyTable = \"Panel Table\";\r\n\r\nconst tableOptions = {\r\n  pageSize: 10,\r\n  pageSizeOptions: [10, 30, 50]\r\n};\r\n\r\nconst Companies = props => {\r\n  let history = useHistory();\r\n\r\n  const [companies, setComanies ] = useState([]);\r\n  useEffect(() => {\r\n    getAllPanels()\r\n        .then((response) => {\r\n          if (!response.error) {\r\n            // (response.data).forEach(user => setUsers(user));\r\n            console.log(response)\r\n            setComanies(response.data)\r\n          }\r\n        })\r\n    \r\n  }, []);\r\n  useEffect(() => {\r\n\t\tlet socket = getSocket();\r\n\t\tsocket.on('panel', (method, data) => {\r\n\t\t\tconsole.log(`interviewwee ${method}`);\r\n\t\t\tconsole.log(data);\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'post':\r\n\t\t\t\t\tsetComanies(addItemToArray(companies, data));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tsetComanies(replaceItemInArray(companies, 'companyID', data, data.companyID));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tsetComanies(removeItemFromArray(companies, 'companyID', parseInt(data.id)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('Invalid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}, [companies]);\r\n   const { addAlert } = props;\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const deleteCompany = useCallback(\r\n    (oldcompanies) => {\r\n      return new Promise((resolve, reject) => {\r\n        deletePanels(oldcompanies.panelID)\r\n              .then((response) => {\r\n                console.log(response);\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"Company deletion Successful!\",\r\n                      });\r\n                      setComanies(removeItemFromArray(companies, 'panelID', oldcompanies.panelID, oldcompanies))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n      });\r\n    },\r\n    [addAlert, companies]\r\n  );\r\n\r\n  const updateCompany = useCallback(\r\n    (newCompanies,oldCompanies) => {\r\n      return new Promise((resolve, reject) => {\r\n        updatePanels(oldCompanies.panelID, newCompanies)\r\n              .then((response) => {\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"Company Updated Successfully!\",\r\n                      });\r\n                      setComanies(replaceItemInArray(companies, 'panelID', newCompanies, oldCompanies.panelID))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n      });\r\n    },\r\n    [addAlert, companies]\r\n  );\r\n\r\n  const saveCompany = useCallback(\r\n    (newCompanies) => {\r\n      var data=({\r\n        \"companyID\": newCompanies.companyID,\r\n        \"name\": newCompanies.name,\r\n        \"email\": newCompanies.email,\r\n        \"link\": newCompanies.link,\r\n        \"contactNo\": newCompanies.contactNo,\r\n        \"Volunteer\": [\r\n          {\r\n              \"volunteerID\" : newCompanies.volunteerID \r\n          }\r\n      ]\r\n      })\r\n      console.log(\"hiii\")\r\n      console.log(JSON.stringify(data))\r\n      return new Promise((resolve, reject) => {\r\n        savePanels(data)\r\n              .then((response) => {\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"Company Saved Successfully!\",\r\n                      });\r\n                      setComanies(addItemToArray(companies, response.data))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n        });\r\n    },\r\n    [addAlert, companies]\r\n  );\r\n  \r\n  const renderProfileBtn = useCallback(\r\n    (rowData) => <Button color=\"primary\" onClick={() => history.push(`users/${rowData.officerID}`)}>Profile</Button>,\r\n    [history]\r\n  );\r\n\r\n  const tableColumns = [\r\n    { title: \"Panel Id\", field: \"panelID\" },\r\n    { title: \"Company Id\", field: \"companyID\" },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Email\", field: \"email\" },\r\n    { title: \"Volunteer Id\", field: \"volunteerID\" },\r\n    { title: \"Link\", field: \"link\" },\r\n    { title: \"Contact Number\", field: \"contactNo\" },\r\n  ];\r\n\r\n  if (false) {\r\n    //return <Spinner />\r\n  } else {\r\n    return <Table\r\n      data={companies}\r\n      title={CompanyTable}\r\n      columns={tableColumns}\r\n      tableOptions={tableOptions}\r\n      editable={{\r\n        onRowAdd: newData =>saveCompany(newData),\r\n        onRowUpdate: (newData, oldData) =>updateCompany(newData, oldData ),\r\n        onRowDelete: oldData => deleteCompany(oldData),\r\n      }}\r\n    />\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addAlert: alert => dispatch(actions.addAlert(alert))\r\n  };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Companies);\r\n","G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\panel.js",["296","297","298","299","300","301","302"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n  getAllParticipants,\r\n  updateParticipants,\r\n} from \"../../api/InterviewsAPI\";\r\nimport { replaceItemInArray, addItemToArray, removeItemFromArray, updateItemInArray } from \"../../shared/utility\";\r\nimport FHModal from \"../../components/UI/FHModal/FHModal\";\r\nimport UserProfile from \"../Panel/UserProfile\"\r\nimport Table from \"../../components/UI/Table/MaterialTable/Table\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Twitter, YouTube } from \"@material-ui/icons\";\r\nimport { Facebook } from \"@material-ui/icons\";\r\n\r\nimport Navbar from \"../../components/UI/Navbar/Navbar\";\r\nimport {getSocket} from '../../services/socket';\r\n\r\nconst IntervieweeTable = \"Interviewee Table\";\r\n\r\nconst tableOptions = {\r\n  pageSize: 10,\r\n  pageSizeOptions: [10, 30, 50],\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    width: '100%',\r\n    color: 'blue',\r\n    display: 'flex',\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n    justifyItems: 'center'\r\n  },\r\n}));\r\n\r\nconst Users = (props) => {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const [participants, setParticipants] = useState([]);\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [currentUser, setCurentUser] = useState({});\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getAllParticipants(props.userId).then((response) => {\r\n      if (!response.error) {\r\n        // (response.data).forEach(user => setUsers(user));\r\n        console.log(response);\r\n        setParticipants(response.data);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\t\tlet socket = getSocket();\r\n\t\tsocket.on('interview', (method, data) => {\r\n      console.log(method);\r\n\t\t\tconsole.log(data);\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'post':\r\n\t\t\t\t\tsetParticipants(addItemToArray(participants, data));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tsetParticipants(replaceItemInArray(participants, 'interviewID', data, data.interviewID));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tconsole.log(data.id);\r\n\t\t\t\t\tsetParticipants(removeItemFromArray(participants, 'interviewID', parseInt(data.id)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('Invalid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n    socket.on('interviewee', (method, data) => {\r\n      console.log(method);\r\n\t\t\tconsole.log(data);\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tsetParticipants(updateItemInArray(participants, 'intervieweeID', data));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tconsole.log(data.id);\r\n\t\t\t\t\tsetParticipants(removeItemFromArray(participants, 'intervieweeID', parseInt(data.id)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('Invalid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}, [participants]);\r\n  const { addAlert } = props;\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n\r\n  console.log(props.userId);\r\n\r\n  const updateInterviee = useCallback(\r\n    (newUser, oldUser) => {\r\n      return new Promise((resolve, reject) => {\r\n        updateParticipants(oldUser.interviewID, newUser).then((response) => {\r\n          if (!response.error) {\r\n            addAlert({\r\n              message: \"Interviewee Status Successfully!\",\r\n            });\r\n            setParticipants(\r\n              replaceItemInArray(\r\n                participants,\r\n                \"interviewID\",\r\n                newUser,\r\n                oldUser.interviewID\r\n              )\r\n            );\r\n            return resolve();\r\n          }\r\n          addAlert({\r\n            message: \"Failed!\",\r\n          });\r\n          return reject();\r\n        });\r\n      });\r\n    },\r\n    [addAlert, participants]\r\n  );\r\n\r\n  const handleModalClose = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const renderFeedbackBtn = useCallback(\r\n    (rowData) => (\r\n      <Button\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          setCurentUser(rowData.interviewID)\r\n          setIsEdit(false);\r\n          setIsModalOpen(true);\r\n        }}\r\n      >\r\n        Profile\r\n      </Button>\r\n    ),\r\n    [history,props]\r\n  );\r\n\r\n  const renderCVBtn = useCallback(\r\n    (rowData) => (\r\n      <Button\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          setCurentUser(rowData.interviewID)\r\n          setIsEdit(false);\r\n          setIsModalOpen(true);\r\n        }}\r\n      >\r\n        Profile\r\n      </Button>\r\n    ),\r\n    [history,props]\r\n  );\r\n\r\n  const renderProfileBtn = useCallback(\r\n    (rowData) => (\r\n      <Link href={rowData.cv} target=\"_blank\" >\r\n                Join Meeting\r\n      </Link>\r\n    ),\r\n    [history,props]\r\n  );\r\n\r\n  const tableColumns = [\r\n    { title: \"Interview ID\", field: \"interviewID\", editable: \"never\" },\r\n    { title: \"Name\", field: \"name\", editable: \"never\" },\r\n    {\r\n      title: \"State\",\r\n      field: \"state\",\r\n      lookup: { Ongoing: \"Ongoing\", Next: \"Next\", Done: \"Done\" },\r\n    },\r\n    {\r\n      title: \"Availability\",\r\n      field: \"availability\",\r\n      lookup: { true: \"Available\", false: \"Not-Available\" },\r\n      editable: \"never\",\r\n    },\r\n    { title: \"Profile\", render: renderProfileBtn },\r\n    { title: \"Profile\", render: renderCVBtn },\r\n    { title: \"Profile\", render: renderFeedbackBtn },\r\n  ];\r\n\r\n\r\n  if (false) {\r\n    //return <Spinner />\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        \r\n        <Navbar companyName=\"ABC Company\" link=\"uom.lk\"/>\r\n\r\n        <div className={classes.paper}>\r\n          <Table\r\n            data={participants}\r\n            title={IntervieweeTable}\r\n            columns={tableColumns}\r\n            tableOptions={tableOptions}\r\n            editable={{\r\n              onRowUpdate: (newData, oldData) =>\r\n                updateInterviee(newData, oldData),\r\n            }}\r\n            className={classes.table}\r\n          />\r\n        </div>\r\n        <FHModal\r\n          body={\r\n            <UserProfile\r\n              data={currentUser}\r\n              isEdit={isEdit}\r\n              setIsModalOpen={setIsModalOpen}\r\n            />\r\n          }\r\n          open={isModalOpen}\r\n          handleClose={handleModalClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    error: state.auth.error,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addAlert: (alert) => dispatch(actions.addAlert(alert)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\r\n\r\n// export default (Users);\r\n","G:\\GitHub\\MockFrontend\\src\\components\\UI\\Navbar\\Navbar.js",["303","304","305","306","307","308","309"],"G:\\GitHub\\MockFrontend\\src\\shared\\routes.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\VolunteerInterviewsAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\Interviewee.js",["310","311","312","313","314","315","316"],"G:\\GitHub\\MockFrontend\\src\\index.js",[],"G:\\GitHub\\MockFrontend\\src\\store\\reducers\\auth.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\Uploadfile.js",["317"],"import React , {useState } from \"react\";\r\n\r\n\r\nconst Users = props => {\r\n    return(\r\n        <div>\r\n            <input type=\"file\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default (Users);\r\n\r\n","G:\\GitHub\\MockFrontend\\src\\containers\\Auth\\auth.js",[],"G:\\GitHub\\MockFrontend\\src\\shared\\utility.js",["318"],"export const INDEX = 'INDEX';\r\n\r\n/**\r\n * Used to update objects immutabaly\r\n * @param {object} object the original JS object\r\n * @param {object} updates updates to be made\r\n */\r\nexport const updateObject = (object, updates) => {\r\n\treturn {\r\n\t\t...object,\r\n\t\t...updates,\r\n\t};\r\n};\r\n\r\n/**\r\n * Used to update an array immutabaly\r\n * @param {array} array the original JS array\r\n * @param {object} item item to be added\r\n */\r\nexport const addItemToArray = (array, item) => {\r\n\tlet newArray = [...array];\r\n\tnewArray.push(item);\r\n\treturn newArray;\r\n};\r\n\r\nexport const addItemRemoveDuplicate = (idtype, array, newarr) => {\r\n\tlet result = [];\r\n\tnewarr.forEach((item) => {\r\n\t\tlet index = array.findIndex((entry) => entry[idtype] == item[idtype]);\r\n\t\tif (index < 0) {\r\n\t\t\tresult.push(item);\r\n\t\t}\r\n\t});\r\n\treturn result;\r\n};\r\n/**\r\n * Used to remve item from an array immutabaly\r\n * @param {array} array the original JS array\r\n * @param {string} fieldName name of the field to identify the object from\r\n * @param {value} value value of the field\r\n */\r\nexport const removeItemFromArray = (array, fieldName, value) => {\r\n\tif (fieldName === INDEX) {\r\n\t\tlet arr = array.filter((item, index) => {\r\n\t\t\treturn index !== value;\r\n\t\t});\r\n\r\n\t\treturn arr;\r\n\t}\r\n\tlet newArr = array.filter((item) => {\r\n\t\treturn item[fieldName] !== value;\r\n\t});\r\n\r\n\treturn newArr;\r\n};\r\n\r\n/**\r\n * Used to replace item from an array immutabaly\r\n * @param {array} array the original JS array\r\n * @param {string} fieldName name of the field to identify the object from\r\n * @param {value} value item to be assigned\r\n */\r\nexport const replaceItemInArray = (array, fieldName, newItem, index) => {\r\n\tif (fieldName === INDEX) {\r\n\t\tlet newArray = [...array];\r\n\t\tnewArray[index] = newItem;\r\n\t\treturn newArray;\r\n\t} else {\r\n\t\treturn array.map((item) => {\r\n\t\t\tif (item[fieldName] === newItem[fieldName]) {\r\n\t\t\t\treturn newItem;\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Used to update an item from an array immutabaly\r\n * @param {array} array the original JS array\r\n * @param {string} fieldName name of the field to identify the object from\r\n * @param {value} value item to be assigned\r\n */\r\nexport const updateItemInArray = (array, fieldName, newItem) => {\r\n\treturn array.map((item) => {\r\n\t\tif (item[fieldName] === newItem[fieldName]) {\r\n\t\t\treturn { ...item, ...newItem };\r\n\t\t}\r\n\t\treturn item;\r\n\t});\r\n};\r\n\r\n/**\r\n * Returns a promise which will resolve after a given number of milliseconds\r\n * @param {number} milliseconds the original JS array\r\n */\r\nexport const sleep = (milliseconds) => {\r\n\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\n/**\r\n * Returns a boolean given an object containing the validity status of each input\r\n * @param {object} inputIsValid a js object with validity info of a function\r\n */\r\nexport const formIsValid = (inputIsValid) => {\r\n\tlet isValid = true;\r\n\tObject.values(inputIsValid).forEach((value) => {\r\n\t\tisValid = isValid && value;\r\n\t});\r\n\r\n\treturn isValid;\r\n};\r\n\r\n/**\r\n * Returns a string with the first letter capitalized\r\n * @param {string} string a string\r\n */\r\nexport const capitalizeFirstLetter = (string) => {\r\n\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n\r\n/**\r\n * This method can be used to extract a\r\n * nested value from an object given a string path\r\n * eg: \"client.name\"\r\n * @param {object} obj\r\n * @param {string} path\r\n */\r\nexport const getNestedValueByPath = (obj, path) => {\r\n\tlet pathArray = path.split('.');\r\n\tlet value = { ...obj };\r\n\tfor (let i = 0; i < pathArray.length; i++) {\r\n\t\tvalue = value[pathArray[i]];\r\n\t\tif (!value) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n};\r\n","G:\\GitHub\\MockFrontend\\src\\api\\InterviewsAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\CustomButtons\\Button.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Card\\CardHeader.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Table\\MaterialTable\\Table.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardHeaderStyle.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Panel\\ContactVolunteer.js",["319","320","321","322","323","324","325","326"],"G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\volunteers.js",["327"],"import React,{useCallback} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport clsx from 'clsx';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Button from '@material-ui/core/Button';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ArrowDropDownCircleIcon from '@material-ui/icons/ArrowDropDownCircle';\r\n\r\nimport * as routez from '../../../shared/routes';\r\nimport { authLogout, removeAlert } from \"../../../store/actions/index\";\r\nimport Alert from '../../../components/UI/FHAlert/FHAlert';\r\n\r\nimport Volunteers from '../../../containers/Admin/volunteers';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    backgroundColor: grey[800],\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    backgroundColor: grey[800],\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  papernav: {\r\n    height: '100%',\r\n    backgroundColor: grey[300],\r\n  },\r\n  menuButtonlog: {\r\n    color: \"white\"\r\n  }\r\n  // fixedHeight: {\r\n  //   height: '100%',\r\n  // },\r\n}));\r\n\r\nfunction Dashboard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const { onauthLogout, isAuthenticated } = props;\r\n\r\n    const handleLogout = () => {\r\n\t\tonauthLogout();\r\n\t\thistory.push(\"/\");\r\n   };\r\n   \r\n  const removeAlert = props.removeAlert;\r\n  const handleAlertClose = useCallback((alertId) => {\r\n      removeAlert(alertId);\r\n  }, [removeAlert]);\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          IEEE\r\n          </Typography>\r\n          <Button className={classes.menuButtonlog} onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List  className={classes.papernav}>\r\n          <ListItem button onClick={() => history.push(`${routez.COMPANIES}`)}>\r\n            <ListItemIcon>\r\n              <ArrowDropDownCircleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Companies\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.PANELS}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Panels\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.VOLUNTEERS}`)}>\r\n            <ListItemIcon>\r\n              <AccountBalanceIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Volunteers\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.INTERVIEWEEBASIC}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Interviewee\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <Alert handleAlertClose={handleAlertClose} alerts={props.alerts} />\r\n                <Volunteers />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n    isAuthenticated: state.auth.token != null,\r\n    alerts: state.alert.alerts\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onauthLogout: () => dispatch(authLogout()),\r\n    removeAlert: (alertId) => dispatch(removeAlert(alertId))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","G:\\GitHub\\MockFrontend\\src\\store\\actions\\index.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\utils.js",[],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\customInputStyle.js",[],"G:\\GitHub\\MockFrontend\\src\\containers\\Admin\\volunteers.js",["328"],"import React , {useState, useEffect, useCallback } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {getAllUsers, deleteUsers, updateUsers, saveUsers } from \"../../api/VolunteerAPI\"\r\nimport {replaceItemInArray, removeItemFromArray, addItemToArray} from \"../../shared/utility\";\r\nimport Table from \"../../components/UI/Table/MaterialTable/Table\";\r\nimport * as actions from '../../store/actions/index';\r\nimport { Button } from \"@material-ui/core\";\r\nimport {getSocket} from '../../services/socket';\r\n\r\nconst UserTable = \"User Table\";\r\n\r\nconst tableOptions = {\r\n  pageSize: 10,\r\n  pageSizeOptions: [10, 30, 50]\r\n};\r\n\r\nconst Users = props => {\r\n  let history = useHistory();\r\n\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n      getAllUsers()\r\n        .then((response) => {\r\n          if (!response.error) {\r\n            // (response.data).forEach(user => setUsers(user));\r\n            console.log(response)\r\n            setUsers(response.data)\r\n          }\r\n        })\r\n  }, []);\r\n  useEffect(() => {\r\n\t\tlet socket = getSocket();\r\n\t\tsocket.on('user', (method, data) => {\r\n      console.log(`interviewwee ${method}`);\r\n\t\t\tconsole.log(data);\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'post':\r\n\t\t\t\t\tsetUsers(addItemToArray(users, data));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tsetUsers(replaceItemInArray(users, 'id', data, data.id));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tconsole.log(\"In\");\r\n\t\t\t\t\tconsole.log(data.id);\r\n\t\t\t\t\tsetUsers(removeItemFromArray(users, 'id', parseInt(data.id)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('Invalid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}, [users]);\r\n   const { addAlert } = props;\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const deleteUser = useCallback(\r\n    (oldUser) => {\r\n      return new Promise((resolve, reject) => {\r\n        deleteUsers(oldUser.id)\r\n              .then((response) => {\r\n                console.log(response);\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"User deletion Successful!\",\r\n                      });\r\n                      setUsers(removeItemFromArray(users, 'id', oldUser.id, oldUser))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n      });\r\n    },\r\n    [addAlert, users]\r\n  );\r\n\r\n  const updateUser = useCallback(\r\n    (newUser,oldUser) => {\r\n      return new Promise((resolve, reject) => {\r\n          updateUsers(oldUser.id, newUser)\r\n              .then((response) => {\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"User Updated Successfully!\",\r\n                      });\r\n                      setUsers(replaceItemInArray(users, 'id', newUser, oldUser.id))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n      });\r\n    },\r\n    [addAlert, users]\r\n  );\r\n\r\n  const saveUser = useCallback(\r\n    (newUser) => {\r\n      var data=({\r\n        \"id\": newUser.id,\r\n        \"name\": newUser.name,\r\n        \"email\": newUser.email,\r\n        \"role\": newUser.role,\r\n        \"contactNo\": newUser.contactNo,\r\n      })\r\n      return new Promise((resolve, reject) => {\r\n        saveUsers(data)\r\n              .then((response) => {\r\n                  if (!response.error) {\r\n                      addAlert({\r\n                          message: \"User Saved Successfully!\",\r\n                      });\r\n                      setUsers(addItemToArray(users, response.data))\r\n                      return resolve();\r\n                  }\r\n                  addAlert({\r\n                    message: \"Failed!\",\r\n                  });\r\n                  return reject();\r\n              })\r\n        });\r\n    },\r\n    [addAlert, users]\r\n  );\r\n  \r\n  const renderProfileBtn = useCallback(\r\n    (rowData) => <Button color=\"primary\" onClick={() => history.push(`users/${rowData.id}`)}>Profile</Button>,\r\n    [history]\r\n  );\r\n\r\n  const tableColumns = [\r\n    { title: \"Id\", field: \"id\", editable:\"never\" },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Email\", field: \"email\" },\r\n    { title: \"Role\", field: \"role\", lookup: { Admin:\"Admin\", Volunteer:\"Volunteer\", Panel:\"Panel\"} },\r\n    { title: \"Contact Number\", field: \"contactNo\" },\r\n  ];\r\n\r\n  if (false) {\r\n    //return <Spinner />\r\n  } else {\r\n    return <Table\r\n      data={users}\r\n      title={UserTable}\r\n      columns={tableColumns}\r\n      tableOptions={tableOptions}\r\n      editable={{\r\n        onRowAdd: newData =>saveUser(newData),\r\n        onRowUpdate: (newData, oldData) =>updateUser(newData, oldData ),\r\n        onRowDelete: oldData => deleteUser(oldData),\r\n      }}\r\n    />\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addAlert: alert => dispatch(actions.addAlert(alert))\r\n  };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Users);\r\n\r\n// export default (Users);\r\n","G:\\GitHub\\MockFrontend\\src\\components\\UI\\CustomInput\\CustomInput.js",[],"G:\\GitHub\\MockFrontend\\src\\helpers\\tableIcons.js",[],"G:\\GitHub\\MockFrontend\\src\\api\\IntervieweeAPI.js",[],"G:\\GitHub\\MockFrontend\\src\\services\\socket.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHModal\\FHModal.js",[],"G:\\GitHub\\MockFrontend\\src\\store\\actions\\auth.js",["329","330"],"import axios from '../../axios-SE';\r\nimport * as actionTypes from './actionTypes';\r\nimport { loginRoute, authRequestTimeoutSec } from '../../shared/consts';\r\nimport { initialize } from '../../services/socket';\r\nlet authRequestInterceptor;\r\n\r\nconst authStart = () => {\r\n\treturn {\r\n        type: actionTypes.AUTH_START\r\n\t};\r\n};\r\n\r\nconst authSuccess = (token, type, userId) => {\r\n    authRequestInterceptor = axios.interceptors.request.use(request => {\r\n\t\trequest.headers.Authorization = `Bearer ${token}`;\r\n\t\treturn request;\r\n\t});\r\n\tconsole.log(userId);\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_SUCCESS,\r\n\t\tidToken: token,\r\n\t\tusertype: type,\r\n\t\tuser: userId,\r\n\t};\r\n};\r\n\r\nconst authFail = (error) => {\r\n    console.log(\"hiii\")\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_FAIL,\r\n        error: error\r\n\t};\r\n};\r\n\r\nexport const authLogout = () => {\r\n\tlocalStorage.removeItem('token');\r\n\tlocalStorage.removeItem('usertype');\r\n\tlocalStorage.removeItem('user');\r\n\tlocalStorage.removeItem('expirationDate');\r\n\taxios.interceptors.request.eject(authRequestInterceptor);\r\n\treturn {\r\n        type: actionTypes.AUTH_LOGOUT\r\n\t};\r\n};\r\n\r\nconst checkAuthTimeout = (expirationTime) => (dispatch) => {\r\n\tsetTimeout(() => {\r\n\t\tdispatch(authLogout());\r\n    }, expirationTime * 1000)\r\n};\r\n\r\nexport const auth = (email, password) => (dispatch) => {\r\n\tdispatch(authStart());\r\n\tlet authData = {\r\n\t\temail: email,\r\n\t\tpassword: password,\r\n    }\r\n\tlet url = loginRoute;\r\n\r\n    axios.post(url,\r\n        authData)\r\n        .then((response) => {\r\n            console.log(response)\r\n            console.log(response.data)\r\n            console.log(response.data.success)\r\n\t\tif (response.data.success) {\r\n\t\t\tconsole.log(response);\r\n\t\t\tconst expirationDate = new Date(new Date().getTime() + authRequestTimeoutSec * 1000);\r\n\t\t\tconsole.log(response.data.type);\r\n\t\t\tlocalStorage.setItem('token', response.data.token);\r\n\t\t\tlocalStorage.setItem('usertype', response.data.type);\r\n\t\t\tconsole.log(response.data.panelID);\r\n\t\t\tlocalStorage.setItem('user', response.data.panelID);\r\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\r\n\t\t\tlet socket = initialize();\r\n\t\t\tif (response.data.type.toLowerCase() == 'admin') {\r\n\t\t\t\tsocket.emit('subscribe', 'admin','name');\r\n\t\t\t} else if (response.data.type.toLowerCase() == 'volunteer') {\r\n\t\t\t\tconsole.log(response.data.panelID);\r\n\t\t\t\tsocket.emit('subscribe', 'volunteer',response.data.panelID);\r\n\t\t\t} else {\r\n\t\t\t\tsocket.emit('subscribe', 'panel', response.data.panelID);\r\n\t\t\t}\r\n\t\t\tdispatch(authSuccess(response.data.token, response.data.type, response.data.panelID));\r\n\t\t\tdispatch(checkAuthTimeout(authRequestTimeoutSec));\r\n\t\t} else {\r\n\t\t\tdispatch(authFail('Invalid Username or Password'));\r\n\t\t}\r\n            if (response.error){\r\n\t\t\tdispatch(authFail('Invalid Username or Password'));\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport const authCheckState = () => (dispatch) => {\r\n\tconst token = localStorage.getItem('token');\r\n\tif (!token) {\r\n\t\tdispatch(authLogout());\r\n\t} else {\r\n\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n\t\tif (expirationDate <= new Date()) {\r\n\t\t\tdispatch(authLogout());\r\n\t\t} else {\r\n\t\t\tconst usertype = localStorage.getItem('usertype');\r\n\t\t\tconst userID = localStorage.getItem('user');\r\n\t\t\tconsole.log(userID);\r\n\t\t\tdispatch(authSuccess(token, usertype, userID));\r\n\t\t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\r\n\t\t}\r\n\t}\r\n}\r\n","G:\\GitHub\\MockFrontend\\src\\components\\UI\\FHtexthelp.js",[],"G:\\GitHub\\MockFrontend\\src\\axios-SE.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\Pages\\Admin\\interviewee.js",["331"],"import React,{useCallback} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport clsx from 'clsx';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Button from '@material-ui/core/Button';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ArrowDropDownCircleIcon from '@material-ui/icons/ArrowDropDownCircle';\r\n\r\nimport * as routez from '../../../shared/routes';\r\nimport { authLogout, removeAlert } from \"../../../store/actions/index\";\r\nimport Alert from '../../../components/UI/FHAlert/FHAlert';\r\n\r\nimport Interviewee from '../../../containers/Admin/Interviewee';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    backgroundColor: grey[800],\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    backgroundColor: grey[800],\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  papernav: {\r\n    height: '100%',\r\n    backgroundColor: grey[300],\r\n  },\r\n  menuButtonlog: {\r\n    color: \"white\"\r\n  }\r\n  // fixedHeight: {\r\n  //   height: '100%',\r\n  // },\r\n}));\r\n\r\nfunction Dashboard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const { onauthLogout, isAuthenticated } = props;\r\n\r\n    const handleLogout = () => {\r\n\t\tonauthLogout();\r\n\t\thistory.push(\"/\");\r\n   };\r\n   \r\n  const removeAlert = props.removeAlert;\r\n  const handleAlertClose = useCallback((alertId) => {\r\n      removeAlert(alertId);\r\n  }, [removeAlert]);\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          IEEE\r\n          </Typography>\r\n          <Button className={classes.menuButtonlog} onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List  className={classes.papernav}>\r\n          <ListItem button onClick={() => history.push(`${routez.COMPANIES}`)}>\r\n            <ListItemIcon>\r\n              <ArrowDropDownCircleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Companies\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.PANELS}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Panels\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.VOLUNTEERS}`)}>\r\n            <ListItemIcon>\r\n              <AccountBalanceIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Volunteers\" />\r\n          </ListItem>\r\n          <ListItem button onClick={() => history.push(`${routez.INTERVIEWEEBASIC}`)}>\r\n            <ListItemIcon>\r\n              <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Interviewee\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <Alert handleAlertClose={handleAlertClose} alerts={props.alerts} />\r\n                <Interviewee />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n    isAuthenticated: state.auth.token != null,\r\n    alerts: state.alert.alerts\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onauthLogout: () => dispatch(authLogout()),\r\n    removeAlert: (alertId) => dispatch(removeAlert(alertId))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","G:\\GitHub\\MockFrontend\\src\\serviceWorker.js",[],"G:\\GitHub\\MockFrontend\\src\\components\\UI\\Navbar\\NavbarVolun.js",["332","333","334","335","336","337"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\nimport * as routez from \"../../../shared/routes\";\r\nimport { authLogout, removeAlert } from \"../../../store/actions/index\";\r\nimport Alert from \"../../../components/UI/FHAlert/FHAlert\";\r\n\r\nfunction Navbar(props) {\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n  \r\n  const { onauthLogout, isAuthenticated,companyName } = props;\r\n\r\n  const handleLogout = () => {\r\n    onauthLogout();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n  window.addEventListener('resize', showButton);\r\n\r\n  return (\r\n    <>\r\n      <nav className='navbar'>\r\n        <div className='navbar-container'>\r\n          {/* <Link to='/' className='navbar-logo' >\r\n            <img src=\"uom.png\"/>\r\n          </Link> */}\r\n          <p className=\"company\">{companyName}</p>\r\n          <div className='menu-icon'>\r\n            <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\r\n          </div>\r\n          <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n            \r\n            \r\n            <li className='nav-item'>\r\n              <Link to='/interviewvolunteer' className='nav-links'>\r\n                Interviews\r\n              </Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n              <Link to='/intervieweelist' className='nav-links'>\r\n                Interviewees\r\n              </Link>\r\n            </li>\r\n            {/* <li className='nav-item'>\r\n              <Link to='/' className='nav-links'>\r\n                Join Meeting\r\n              </Link>\r\n            </li> */}\r\n            <li className='nav-item'>\r\n              <Link\r\n                to='/contactvolunteer'\r\n                className='nav-links'\r\n              >\r\n                Contact Volunteer\r\n              </Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n              <Link\r\n                to='/'\r\n                className='nav-links'\r\n                onClick={() => handleLogout()}\r\n              >\r\n                Log Out\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n         \r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token != null,\r\n    alerts: state.alert.alerts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onauthLogout: () => dispatch(authLogout()),\r\n    removeAlert: (alertId) => dispatch(removeAlert(alertId)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","G:\\GitHub\\MockFrontend\\src\\containers\\Volunteers\\IntervieweeList.js",["338","339","340","341","342","343","344"],"G:\\GitHub\\MockFrontend\\src\\assets\\jss\\material-dashboard-react\\components\\cardBodyStyle.js",[],{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","severity":1,"message":"350","line":2,"column":10,"nodeType":"351","messageId":"352","endLine":2,"endColumn":19},{"ruleId":"349","severity":1,"message":"353","line":9,"column":8,"nodeType":"351","messageId":"352","endLine":9,"endColumn":18},{"ruleId":"349","severity":1,"message":"354","line":11,"column":8,"nodeType":"351","messageId":"352","endLine":11,"endColumn":16},{"ruleId":"349","severity":1,"message":"355","line":12,"column":8,"nodeType":"351","messageId":"352","endLine":12,"endColumn":21},{"ruleId":"349","severity":1,"message":"356","line":13,"column":8,"nodeType":"351","messageId":"352","endLine":13,"endColumn":19},{"ruleId":"349","severity":1,"message":"357","line":16,"column":8,"nodeType":"351","messageId":"352","endLine":16,"endColumn":18},{"ruleId":"349","severity":1,"message":"358","line":17,"column":8,"nodeType":"351","messageId":"352","endLine":17,"endColumn":18},{"ruleId":"349","severity":1,"message":"359","line":19,"column":8,"nodeType":"351","messageId":"352","endLine":19,"endColumn":18},{"ruleId":"360","severity":1,"message":"361","line":57,"column":6,"nodeType":"362","endLine":57,"endColumn":8,"suggestions":"363"},{"ruleId":"349","severity":1,"message":"364","line":129,"column":9,"nodeType":"351","messageId":"352","endLine":129,"endColumn":25},{"ruleId":"345","replacedBy":"365"},{"ruleId":"347","replacedBy":"366"},{"ruleId":"349","severity":1,"message":"367","line":139,"column":25,"nodeType":"351","messageId":"352","endLine":139,"endColumn":40},{"ruleId":"345","replacedBy":"368"},{"ruleId":"347","replacedBy":"369"},{"ruleId":"345","replacedBy":"370"},{"ruleId":"347","replacedBy":"371"},{"ruleId":"349","severity":1,"message":"372","line":66,"column":8,"nodeType":"351","messageId":"352","endLine":66,"endColumn":21},{"ruleId":"349","severity":1,"message":"364","line":136,"column":8,"nodeType":"351","messageId":"352","endLine":136,"endColumn":24},{"ruleId":"345","replacedBy":"373"},{"ruleId":"347","replacedBy":"374"},{"ruleId":"349","severity":1,"message":"367","line":136,"column":25,"nodeType":"351","messageId":"352","endLine":136,"endColumn":40},{"ruleId":"349","severity":1,"message":"364","line":139,"column":9,"nodeType":"351","messageId":"352","endLine":139,"endColumn":25},{"ruleId":"349","severity":1,"message":"375","line":17,"column":10,"nodeType":"351","messageId":"352","endLine":17,"endColumn":17},{"ruleId":"349","severity":1,"message":"376","line":17,"column":19,"nodeType":"351","messageId":"352","endLine":17,"endColumn":26},{"ruleId":"349","severity":1,"message":"377","line":18,"column":10,"nodeType":"351","messageId":"352","endLine":18,"endColumn":18},{"ruleId":"360","severity":1,"message":"378","line":60,"column":6,"nodeType":"362","endLine":60,"endColumn":8,"suggestions":"379"},{"ruleId":"360","severity":1,"message":"380","line":151,"column":5,"nodeType":"362","endLine":151,"endColumn":20,"suggestions":"381"},{"ruleId":"360","severity":1,"message":"380","line":167,"column":5,"nodeType":"362","endLine":167,"endColumn":20,"suggestions":"382"},{"ruleId":"360","severity":1,"message":"380","line":176,"column":5,"nodeType":"362","endLine":176,"endColumn":20,"suggestions":"383"},{"ruleId":"349","severity":1,"message":"384","line":8,"column":13,"nodeType":"351","messageId":"352","endLine":8,"endColumn":19},{"ruleId":"349","severity":1,"message":"385","line":10,"column":8,"nodeType":"351","messageId":"352","endLine":10,"endColumn":13},{"ruleId":"349","severity":1,"message":"386","line":14,"column":10,"nodeType":"351","messageId":"352","endLine":14,"endColumn":16},{"ruleId":"349","severity":1,"message":"387","line":17,"column":9,"nodeType":"351","messageId":"352","endLine":17,"endColumn":20},{"ruleId":"349","severity":1,"message":"388","line":18,"column":9,"nodeType":"351","messageId":"352","endLine":18,"endColumn":24},{"ruleId":"349","severity":1,"message":"367","line":28,"column":25,"nodeType":"351","messageId":"352","endLine":28,"endColumn":40},{"ruleId":"349","severity":1,"message":"389","line":28,"column":54,"nodeType":"351","messageId":"352","endLine":28,"endColumn":58},{"ruleId":"349","severity":1,"message":"390","line":5,"column":8,"nodeType":"351","messageId":"352","endLine":5,"endColumn":13},{"ruleId":"349","severity":1,"message":"391","line":11,"column":10,"nodeType":"351","messageId":"352","endLine":11,"endColumn":16},{"ruleId":"349","severity":1,"message":"392","line":22,"column":7,"nodeType":"351","messageId":"352","endLine":22,"endColumn":14},{"ruleId":"360","severity":1,"message":"393","line":114,"column":5,"nodeType":"362","endLine":114,"endColumn":26,"suggestions":"394"},{"ruleId":"360","severity":1,"message":"395","line":148,"column":22,"nodeType":"351","endLine":148,"endColumn":33},{"ruleId":"349","severity":1,"message":"396","line":174,"column":9,"nodeType":"351","messageId":"352","endLine":174,"endColumn":20},{"ruleId":"360","severity":1,"message":"397","line":191,"column":6,"nodeType":"362","endLine":191,"endColumn":8,"suggestions":"398"},{"ruleId":"349","severity":1,"message":"399","line":1,"column":17,"nodeType":"351","messageId":"352","endLine":1,"endColumn":25},{"ruleId":"400","severity":1,"message":"401","line":29,"column":56,"nodeType":"402","messageId":"403","endLine":29,"endColumn":58},{"ruleId":"349","severity":1,"message":"350","line":3,"column":10,"nodeType":"351","messageId":"352","endLine":3,"endColumn":19},{"ruleId":"349","severity":1,"message":"353","line":11,"column":8,"nodeType":"351","messageId":"352","endLine":11,"endColumn":18},{"ruleId":"349","severity":1,"message":"354","line":13,"column":8,"nodeType":"351","messageId":"352","endLine":13,"endColumn":16},{"ruleId":"349","severity":1,"message":"355","line":14,"column":8,"nodeType":"351","messageId":"352","endLine":14,"endColumn":21},{"ruleId":"349","severity":1,"message":"356","line":15,"column":8,"nodeType":"351","messageId":"352","endLine":15,"endColumn":19},{"ruleId":"349","severity":1,"message":"357","line":18,"column":8,"nodeType":"351","messageId":"352","endLine":18,"endColumn":18},{"ruleId":"349","severity":1,"message":"358","line":19,"column":8,"nodeType":"351","messageId":"352","endLine":19,"endColumn":18},{"ruleId":"349","severity":1,"message":"359","line":21,"column":8,"nodeType":"351","messageId":"352","endLine":21,"endColumn":18},{"ruleId":"349","severity":1,"message":"367","line":136,"column":25,"nodeType":"351","messageId":"352","endLine":136,"endColumn":40},{"ruleId":"349","severity":1,"message":"364","line":133,"column":9,"nodeType":"351","messageId":"352","endLine":133,"endColumn":25},{"ruleId":"400","severity":1,"message":"401","line":76,"column":41,"nodeType":"402","messageId":"403","endLine":76,"endColumn":43},{"ruleId":"400","severity":1,"message":"401","line":78,"column":48,"nodeType":"402","messageId":"403","endLine":78,"endColumn":50},{"ruleId":"349","severity":1,"message":"367","line":137,"column":25,"nodeType":"351","messageId":"352","endLine":137,"endColumn":40},{"ruleId":"349","severity":1,"message":"384","line":8,"column":13,"nodeType":"351","messageId":"352","endLine":8,"endColumn":19},{"ruleId":"349","severity":1,"message":"385","line":10,"column":8,"nodeType":"351","messageId":"352","endLine":10,"endColumn":13},{"ruleId":"349","severity":1,"message":"386","line":14,"column":10,"nodeType":"351","messageId":"352","endLine":14,"endColumn":16},{"ruleId":"349","severity":1,"message":"387","line":17,"column":9,"nodeType":"351","messageId":"352","endLine":17,"endColumn":20},{"ruleId":"349","severity":1,"message":"388","line":18,"column":9,"nodeType":"351","messageId":"352","endLine":18,"endColumn":24},{"ruleId":"349","severity":1,"message":"367","line":28,"column":25,"nodeType":"351","messageId":"352","endLine":28,"endColumn":40},{"ruleId":"349","severity":1,"message":"390","line":5,"column":8,"nodeType":"351","messageId":"352","endLine":5,"endColumn":13},{"ruleId":"349","severity":1,"message":"391","line":11,"column":10,"nodeType":"351","messageId":"352","endLine":11,"endColumn":16},{"ruleId":"349","severity":1,"message":"392","line":22,"column":7,"nodeType":"351","messageId":"352","endLine":22,"endColumn":14},{"ruleId":"360","severity":1,"message":"393","line":114,"column":5,"nodeType":"362","endLine":114,"endColumn":26,"suggestions":"404"},{"ruleId":"360","severity":1,"message":"395","line":148,"column":22,"nodeType":"351","endLine":148,"endColumn":33},{"ruleId":"349","severity":1,"message":"396","line":174,"column":9,"nodeType":"351","messageId":"352","endLine":174,"endColumn":20},{"ruleId":"360","severity":1,"message":"397","line":191,"column":6,"nodeType":"362","endLine":191,"endColumn":8,"suggestions":"405"},"no-native-reassign",["406"],"no-negated-in-lhs",["407"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'InputLabel' is defined but never used.","'GridItem' is defined but never used.","'GridContainer' is defined but never used.","'CustomInput' is defined but never used.","'CardHeader' is defined but never used.","'CardAvatar' is defined but never used.","'CardFooter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["408"],"'renderProfileBtn' is assigned a value but never used.",["406"],["407"],"'isAuthenticated' is assigned a value but never used.",["406"],["407"],["406"],["407"],"'deleteCompany' is assigned a value but never used.",["406"],["407"],"'Twitter' is defined but never used.","'YouTube' is defined but never used.","'Facebook' is defined but never used.","React Hook useEffect has a missing dependency: 'props.userId'. Either include it or remove the dependency array.",["409"],"React Hook useCallback has unnecessary dependencies: 'history' and 'props'. Either exclude them or remove the dependency array.",["410"],["411"],["412"],"'routez' is defined but never used.","'Alert' is defined but never used.","'button' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","'link' is assigned a value but never used.","'Image' is defined but never used.","'Button' is defined but never used.","'history' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'imageUrl'. Either include it or remove the dependency array.",["413"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'renderCVBtn' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'uploadImage'. Either include it or remove the dependency array.",["414"],"'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["415"],["416"],"no-global-assign","no-unsafe-negation",{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"421","fix":"423"},{"desc":"421","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"425","fix":"429"},{"desc":"427","fix":"430"},"Update the dependencies array to be: [data]",{"range":"431","text":"432"},"Update the dependencies array to be: [props.userId]",{"range":"433","text":"434"},"Update the dependencies array to be: []",{"range":"435","text":"436"},{"range":"437","text":"436"},{"range":"438","text":"436"},"Update the dependencies array to be: [addAlert, companies, imageUrl]",{"range":"439","text":"440"},"Update the dependencies array to be: [uploadImage]",{"range":"441","text":"442"},{"range":"443","text":"440"},{"range":"444","text":"442"},[1903,1905],"[data]",[1939,1941],"[props.userId]",[4314,4329],"[]",[4636,4651],[4828,4843],[3830,3851],"[addAlert, companies, imageUrl]",[6180,6182],"[uploadImage]",[3830,3851],[6180,6182]]